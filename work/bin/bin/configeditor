#!/bin/bash

# Usage:
#
#   ./configeditor config/stage/djgateway/rollout_config/**
#
#   Each line of form: "<file_path>:<file_contents>".
#
#   Available operations:
#   - Update file_contents to update the contents for that file
#   - Add new lines of the same form to create new files
#   - Prefix the line with "d" or "delete" to delete that file

output_file=/tmp/editconfig
rm $output_file

# populate with files to edit
files=$@
for file in $files; do
    output=$(grep -r '' $file /dev/null)
    echo "$output" >> "$output_file"
done

# open editor
before_hash=$(md5 $output_file)
nvim $output_file
after_hash=$(md5 $output_file)

if [ "$before_hash" = "$after_hash" ]; then
    echo "No changes to make"
fi

# process content updates
while IFS='' read -r line || [[ -n "$line" ]]; do
    IFS=':' read -r file contents <<< "$line"
    IFS=' ' read -r cmd_tmp file_tmp <<< "$file"

    # skip empty lines
    if [ -z "$file" ]; then
        continue
    fi

    # determine operation to perform
    cmd=""
    case "$cmd_tmp" in
        d|delete)
            cmd="delete"
            file="$file_tmp"
            ;;
    esac
    if [ -z "$cmd" ]; then
        if [ ! -f $file ]; then
            cmd="create"
        else
            cmd="update"
        fi
    fi

    # perform operations
    case "$cmd" in
        delete)
            echo "DELETE \"$file\""
            rm $file
            ;;
        create)
            echo "CREATE \"$line\""
            dir=$(dirname "$file")
            if [ ! -d "$dir" ]; then
                mkdir -p "$dir"
            fi
            echo "$contents" > "$file"
            ;;
        update)
            current_content=$(cat "$file")
            if [ "$current_content" != "$contents" ]; then
                echo "UPDATE \"$line\""
                echo "$contents" > "$file"
            fi
            ;;
    esac
done < "$output_file"
