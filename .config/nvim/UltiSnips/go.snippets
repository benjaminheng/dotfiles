# ctx context.Context
snippet ctx "ctx context.Context" w
ctx context.Context
endsnippet

snippet ifok "If ok then" b
if ${2:v}, ok := ${1}; ok {
	${0:${VISUAL}}
}
endsnippet

snippet orionsvcmeth "Orion service method definition" b
func ($1 $2) $3(ctx context.Context, req *proto.$3Request) (*proto.$3Response, error) {
	resp := &proto.$3Response{}
	$4
	return resp, nil
}
endsnippet

snippet testcases "table tests struct" b
cases := []struct {
	$1
}{
	{},
}

for _, c := range cases {

}
endsnippet

snippet spew "spew.Dump" b
spew.Dump($1)
endsnippet

snippet createrule "Trust service create rule" b
state.CreateRule(Rule{
	Name: "",
	Func: func(state *State) bool {
		return false
	},
	RolloutPercent: 0,
	Reason:         "",
})
endsnippet

snippet whenrule "Trust service when rule" b
state.WhenRule([]string{
	""
},
	NewLabelAction("label_name", CreatedContentLabelTarget, PendingLabelState),
)
endsnippet

snippet ffjson "Parse to json and print" b
b, _ := json.MarshalIndent($1, "", "  ")
fmt.Printf("$1 = %+v\n", string(b))
endsnippet

# test table snippet
snippet tt
var tests = []struct {
	name string
	expected string
	given string
}{
	{
		"${1}",
		"",
		"",
	},
}
for _, tt := range tests {
	tt := tt
	t.Run(tt.name, func(t *testing.T){
		result := ${0:${VISUAL}}(tt.given)
		if result != tt.expected {
				t.Errorf("$0(%+v): expected %+v, got %+v", tt.given, tt.expected, result)
		}

	})
}
endsnippet

snippet span "zipkin span" b
span, _ := spanutils.NewInternalSpan(ctx, "$1")
defer span.Finish()
endsnippet

snippet spanerr "zipkin span defer error tag" b
defer func() {
	if err != nil {
		span.SetTag("error", err.Error())
	}
}()
endsnippet
